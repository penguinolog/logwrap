# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.5', architecture: 'x64', kind: 'native'}
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.6', architecture: 'x64', kind: 'native'}
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.7', architecture: 'x64', kind: 'native'}

- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.5', architecture: 'x64', kind: 'cython'}
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.5', architecture: 'x86', kind: 'cython'}
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.6', architecture: 'x64', kind: 'cython'}
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.6', architecture: 'x86', kind: 'cython'}
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.7', architecture: 'x64', kind: 'cython'}
- template: .azure_pipelines/run_tests.yml
  parameters: {python: '3.7', architecture: 'x86', kind: 'cython'}


- job: 'Build_and_deploy'
  dependsOn:
  - py3.5_x64_native
  - py3.6_x64_native
  - py3.7_x64_native

  - py3.5_x64_cython
  - py3.5_x86_cython
  - py3.6_x64_cython
  - py3.6_x86_cython
  - py3.7_x64_cython
  - py3.7_x86_cython

  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  pool:
    vmIMage: 'VS2017-Win2016'
  strategy:
    maxParallel: 6
    matrix:
      Python35_x64:
        python.version: '3.5'
      Python35_x86:
        python.version: '3.5'
        architecture: 'x86'
      Python36_x64:
        python.version: '3.6'
      Python36_x86:
        python.version: '3.6'
        architecture: 'x86'
      Python37_x64:
        python.version: '3.7'
      Python37_x86:
        python.version: '3.7'
        architecture: 'x86'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -U setuptools
      pip install -r build_requirements.txt
    displayName: 'Install dependencies'

  - script: |
      python setup.py bdist_wheel
    displayName: 'Build'

  - task: TwineAuthenticate@0
    displayName: 'Twine Authenticate '
    inputs:
      externalFeeds: PyPI

  - script: |
      pip install -U twine
      twine upload -r PyPI --config-file $(PYPIRC_PATH) dist/logwrap-* --skip-existing
    displayName: 'Deploy'
